Running the main thm fails? not entirely sure why, but could be due to the call depth limit.
There are alot of subgoals for this section as well.
Also, is the end thm set up correctly? i.e. Should it be thm?

(thm (implies (and (natp n) (<= 2 n))
              (equal (nth (- n 2) (pascal-row (- n 1)))
                     (nth 2 (nth 0 (pascal-triangle n))))))

-------------------------------------------------------------------------------------
HARD ACL2 ERROR in ACL2::REWRITE:  The call depth limit of 1000 has
been exceeded in the ACL2 rewriter.  To see why the limit was exceeded,
first execute
  :brr t
and then try the proof again, and then execute the form (cw-gstack)
or, for less verbose output, instead try (cw-gstack :frames 30).  You
may then notice a loop caused by some set of enabled rules, some of
which you can then disable; see :DOC disable.  For a possible solution
when there is not a loop, see :DOC rewrite-stack-limit.

-------------------------------------------------------------------------------------
ACL2S !>QUERY 
(thm (implies (and (natp n) (<= 2 n))
              (equal (nth (- n 2) (pascal-row (- n 1)))
                     (nth 2 (nth 0 (pascal-triangle n))))))

<< Starting proof tree logging >>

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Goal'
Subgoal 4
Subgoal 4'
Subgoal 4.6
Subgoal 4.5
Subgoal 4.5'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal 4.5' ^^^

([ A key checkpoint:

Subgoal 4.5'
(IMPLIES (AND (INTEGERP N)
              (<= 2 N)
              (NOT (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N))))))
         (NOT (NTH (+ -2 N)
                   (CONS 1 (PASCAL-ROW-H (+ -1 N) 2 1)))))

*1 (Subgoal 4.5') is pushed for proof by induction.

])
Subgoal 4.4
Subgoal 4.4'
Subgoal 4.3
Subgoal 4.3'
Subgoal 4.2
Subgoal 4.2'
Subgoal 4.1
Subgoal 4.1'
Subgoal 4.1''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal 4.1'' ^^^

([ A key checkpoint:

Subgoal 4.1''
(IMPLIES
    (AND (INTEGERP N)
         (<= 2 N)
         (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N)))))
    (EQUAL (NTH (+ -2 N)
                (CONS 1 (PASCAL-ROW-H (+ -1 N) 2 1)))
           (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N))))))))

Normally we would attempt to prove Subgoal 4.1'' by induction.  However,
we prefer in this instance to focus on the original input conjecture
rather than this simplified special case.  We therefore abandon our
previous work on this conjecture and reassign the name *1 to the original
conjecture.  (See :DOC otf-flg.)

])

Perhaps we can prove *1 by induction.  One induction scheme is suggested
by this conjecture.  

We will induct according to a scheme suggested by (PASCAL-TRIANGLE N).
This suggestion was produced using the :induction rules 
PASCAL-TRIANGLE-INDUCTION-SCHEME and 
PASCAL-TRIANGLE-INDUCTION-SCHEME-FROM-DEFINITION.  If we let (:P N)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (FORCE (NATP N))) (:P N))
     (IMPLIES (AND (FORCE (NATP N))
                   (NOT (ZP N))
                   (:P (+ -1 N)))
              (:P N))
     (IMPLIES (AND (FORCE (NATP N)) (ZP N))
              (:P N))).
This induction is justified by the same argument used to admit 
PASCAL-TRIANGLE.  When applied to the goal at hand the above induction
scheme produces two nontautological subgoals.
^^^ Checkpoint *1 ^^^
Subgoal *1/2
Subgoal *1/2'
Subgoal *1/2.4
Subgoal *1/2.3
Subgoal *1/2.2

Forcing Round 1 is pending (caused first by Subgoal *1/2.2).
Subgoal *1/2.2.3
Subgoal *1/2.2.3'
Subgoal *1/2.2.3''
Subgoal *1/2.2.3.4
Subgoal *1/2.2.3.4'
Subgoal *1/2.2.3.3
Subgoal *1/2.2.3.2
Subgoal *1/2.2.3.2'
Subgoal *1/2.2.3.1
Subgoal *1/2.2.3.1'
Subgoal *1/2.2.3.1''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.3.1'' ^^^
Subgoal *1/2.2.3.1'''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.3.1''' ^^^

([ A key checkpoint while proving *1 (descended from Goal):

Subgoal *1/2.2.3.1''
(IMPLIES (AND (NOT (ZP N))
              (<= 4 N)
              (NOT (NTH (+ -3 N)
                        (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3))))
              (NOT (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))))
         (EQUAL (NTH (+ -3 N)
                     (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
                1))

*1.1 (Subgoal *1/2.2.3.1''') is pushed for proof by induction.

])
Subgoal *1/2.2.2
Subgoal *1/2.2.2'
Subgoal *1/2.2.2.3
Subgoal *1/2.2.2.3.4
Subgoal *1/2.2.2.3.4'
Subgoal *1/2.2.2.3.3
Subgoal *1/2.2.2.3.2
Subgoal *1/2.2.2.3.2'
Subgoal *1/2.2.2.3.1
Subgoal *1/2.2.2.3.1'
Subgoal *1/2.2.2.3.1''
^^^ Checkpoint Subgoal *1/2.2.2.3.1'' ^^^
Subgoal *1/2.2.2.3.1'''
^^^ Checkpoint Subgoal *1/2.2.2.3.1''' ^^^
Subgoal *1/2.2.2.3.1'4'
^^^ Checkpoint Subgoal *1/2.2.2.3.1'4' ^^^
Subgoal *1/2.2.2.3.1.2
Subgoal *1/2.2.2.3.1.1
Subgoal *1/2.2.2.3.1.1'
^^^ Checkpoint Subgoal *1/2.2.2.3.1.1' ^^^

([ A key checkpoint while proving *1 (descended from Goal):

Subgoal *1/2.2.2.3.1''
(IMPLIES
     (AND (NOT (ZP N))
          (<= 4 N)
          (EQUAL (NTH (+ -3 N)
                      (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3)))
                 1)
          (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))
          (NOT (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))
     (EQUAL (NTH (+ -3 N)
                 (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
            1))

*1.2 (Subgoal *1/2.2.2.3.1.1') is pushed for proof by induction.

])
Subgoal *1/2.2.2.2
Subgoal *1/2.2.2.2'
Subgoal *1/2.2.2.2.4
Subgoal *1/2.2.2.2.4'
Subgoal *1/2.2.2.2.3
Subgoal *1/2.2.2.2.2
Subgoal *1/2.2.2.2.2'
Subgoal *1/2.2.2.2.1
Subgoal *1/2.2.2.2.1'
Subgoal *1/2.2.2.2.1''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.2.2.1'' ^^^
Subgoal *1/2.2.2.2.1'''
Subgoal *1/2.2.2.2.1.2

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.2.2.1.2 ^^^
Subgoal *1/2.2.2.2.1.2'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.2.2.1.2' ^^^

([ A key checkpoint while proving *1 (descended from Goal):

Subgoal *1/2.2.2.2.1''
(IMPLIES
 (AND
     (NOT (ZP N))
     (<= 4 N)
     (EQUAL (NTH (+ -3 N)
                 (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3)))
            (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))
     (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))
     (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))))
 (EQUAL
      (NTH (+ -3 N)
           (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
      (+ 1
         (CAR (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))
         (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))))

*1.3 (Subgoal *1/2.2.2.2.1.2') is pushed for proof by induction.
Subgoal *1/2.2.2.2.1.1

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.2.2.1.1 ^^^
Subgoal *1/2.2.2.2.1.1'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1/2.2.2.2.1.1' ^^^

*1.4 (Subgoal *1/2.2.2.2.1.1') is pushed for proof by induction.

])
Subgoal *1/2.2.2.1
Subgoal *1/2.2.2.1'
Subgoal *1/2.2.1
Subgoal *1/2.2.1'
Subgoal *1/2.1
Subgoal *1/1

So we now return to *1.4, which is

(IMPLIES
     (AND (INTEGERP I)
          (NOT (ZP N))
          (<= 4 N)
          (ROW-HELPER (CAR (PASCAL-TRIANGLE I)))
          (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE I))))
          (NOT (ACL2-NUMBERP (NTH I
                                  (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3))))))
     (EQUAL (NTH I (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
            (+ 1
               (CAR (ROW-HELPER (CAR (PASCAL-TRIANGLE I))))))).
^^^ Checkpoint *1.4 ^^^
Subgoal *1.4/7
Subgoal *1.4/7'
Subgoal *1.4/7.2
Subgoal *1.4/7.2.3
Subgoal *1.4/7.2.3'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.3' ^^^
Subgoal *1.4/7.2.3''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.3'' ^^^

*1.4.1 (Subgoal *1.4/7.2.3'') is pushed for proof by induction.
Subgoal *1.4/7.2.2
Subgoal *1.4/7.2.2'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.2' ^^^
Subgoal *1.4/7.2.2''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.2'' ^^^

*1.4.2 (Subgoal *1.4/7.2.2'') is pushed for proof by induction.
Subgoal *1.4/7.2.1

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.1 ^^^
Subgoal *1.4/7.2.1'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.2.1' ^^^

*1.4.3 (Subgoal *1.4/7.2.1') is pushed for proof by induction.
Subgoal *1.4/7.1

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/7.1 ^^^

*1.4.4 (Subgoal *1.4/7.1) is pushed for proof by induction.
Subgoal *1.4/6
Subgoal *1.4/6'
Subgoal *1.4/6.4
Subgoal *1.4/6.4'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/6.4' ^^^

*1.4.5 (Subgoal *1.4/6.4') is pushed for proof by induction.
Subgoal *1.4/6.3
Subgoal *1.4/6.2
Subgoal *1.4/6.2'
Subgoal *1.4/6.2''

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/6.2'' ^^^

*1.4.6 (Subgoal *1.4/6.2'') is pushed for proof by induction.
Subgoal *1.4/6.1
Subgoal *1.4/6.1.3
Subgoal *1.4/6.1.3'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/6.1.3' ^^^

*1.4.7 (Subgoal *1.4/6.1.3') is pushed for proof by induction.
Subgoal *1.4/6.1.2
Subgoal *1.4/6.1.2'

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/6.1.2' ^^^

*1.4.8 (Subgoal *1.4/6.1.2') is pushed for proof by induction.
Subgoal *1.4/6.1.1

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
^^^ Checkpoint Subgoal *1.4/6.1.1 ^^^

*1.4.9 (Subgoal *1.4/6.1.1) is pushed for proof by induction.
Subgoal *1.4/5
Subgoal *1.4/5'


HARD ACL2 ERROR in ACL2::REWRITE:  The call depth limit of 1000 has
been exceeded in the ACL2 rewriter.  To see why the limit was exceeded,
first execute
  :brr t
and then try the proof again, and then execute the form (cw-gstack)
or, for less verbose output, instead try (cw-gstack :frames 30).  You
may then notice a loop caused by some set of enabled rules, some of
which you can then disable; see :DOC disable.  For a possible solution
when there is not a loop, see :DOC rewrite-stack-limit.


Rules: ((:COMPOUND-RECOGNIZER ACL2::ACL2-NUMBER-LISTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::ATOM-LISTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::INTEGER-LISTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::LLONP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::NAT-LISTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER ACL2::RATIONAL-LISTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::ZP-COMPOUND-RECOGNIZER)
        (:DEFINITION ENDP)
        (:DEFINITION FORCE)
        (:DEFINITION NAT-LISTP)
        (:DEFINITION NATP)
        (:DEFINITION NEW-ROW-DEFINITION-RULE)
        (:DEFINITION NFIX)
        (:DEFINITION NOT)
        (:DEFINITION NTH)
        (:DEFINITION PASCAL-ROW-DEFINITION-RULE)
        (:DEFINITION PASCAL-ROW-H-DEFINITION-RULE)
        (:DEFINITION PASCAL-TRIANGLE-DEFINITION-RULE)
        (:DEFINITION ROW-HELPER-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART ACL2-NUMBERP)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CDR)
        (:EXECUTABLE-COUNTERPART CONS)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART FORCE)
        (:EXECUTABLE-COUNTERPART LEN)
        (:EXECUTABLE-COUNTERPART LLEN)
        (:EXECUTABLE-COUNTERPART NATP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART NTH)
        (:EXECUTABLE-COUNTERPART PASCAL-ROW-H)
        (:EXECUTABLE-COUNTERPART PASCAL-TRIANGLE)
        (:EXECUTABLE-COUNTERPART ROW-HELPER)
        (:EXECUTABLE-COUNTERPART ZP)
        (:FAKE-RUNE-FOR-LINEAR NIL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING ACL2-NUMBER-LIST-IS-SUBTYPE-OF-ATOM-LIST)
        (:FORWARD-CHAINING DEFDATA::ACL2-NUMBER-LISTP-FORWARD-TO-TRUE-LISTP)
        (:FORWARD-CHAINING INTEGER-LIST-IS-SUBTYPE-OF-RATIONAL-LIST)
        (:FORWARD-CHAINING INTEGER-LISTP-FORWARD-TO-RATIONAL-LISTP)
        (:FORWARD-CHAINING NAT-LIST-IS-SUBTYPE-OF-INTEGER-LIST)
        (:FORWARD-CHAINING NAT-LIST=>DEF)
        (:FORWARD-CHAINING ACL2::NAT-LISTP-FORWARD-TO-INTEGER-LISTP)
        (:FORWARD-CHAINING DEFDATA::NAT-LISTP-FORWARD-TO-INTEGER-LISTP)
        (:FORWARD-CHAINING PASCAL-ROW-H-CONTRACT)
        (:FORWARD-CHAINING PASCAL-TRIANGLE-CONTRACT)
        (:FORWARD-CHAINING RATIONAL-LIST-IS-SUBTYPE-OF-ACL2-NUMBER-LIST)
        (:FORWARD-CHAINING ACL2::RATIONAL-LISTP-FORWARD-TO-ACL2-NUMBER-LISTP)
        (:FORWARD-CHAINING
             DEFDATA::RATIONAL-LISTP-FORWARD-TO-ACL2-NUMBER-LISTP)
        (:FORWARD-CHAINING ROW-HELPER-CONTRACT)
        (:INDUCTION NTH)
        (:INDUCTION PASCAL-TRIANGLE-INDUCTION-SCHEME)
        (:INDUCTION PASCAL-TRIANGLE-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE ACL2::|(+ (+ x y) z)|)
        (:REWRITE ACL2::|(+ 0 x)|)
        (:REWRITE ACL2::|(+ c (+ d x))|)
        (:REWRITE ACL2::|(+ x (if a b c))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2S-REDUCE-ADDITIVE-CONSTANT-<)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CONS-NAT-LISTP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE DEFAULT-CAR)
        (:REWRITE ACL2::DEFAULT-PLUS-2)
        (:REWRITE NTH-ADD1)
        (:REWRITE ACL2::NTH-OF-NIL)
        (:REWRITE ACL2::NTH-WHEN-TOO-LARGE-CHEAP)
        (:REWRITE ACL2::NTH-WHEN-ZP)
        (:REWRITE ACL2::REMOVE-STRICT-INEQUALITIES)
        (:REWRITE ACL2::REMOVE-WEAK-INEQUALITIES)
        (:REWRITE ROW-HELPER-EMPTY)
        (:REWRITE ROW-HELPER-LENGTH)
        (:REWRITE ACL2::ZP-OPEN)
        (:TYPE-PRESCRIPTION LLONP)
        (:TYPE-PRESCRIPTION NAT-LISTP)
        (:TYPE-PRESCRIPTION PASCAL-TRIANGLE-CONTRACT-TP)
        (:TYPE-PRESCRIPTION ROW-HELPER-CONTRACT-TP))

Here is the current pstack [see :DOC pstack]:
(ACL2::REWRITE-ATM ACL2::SIMPLIFY-CLAUSE ACL2::WATERFALL)

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoints before reverting to proof by induction: ***

Subgoal 4.5'
(IMPLIES (AND (INTEGERP N)
              (<= 2 N)
              (NOT (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N))))))
         (NOT (NTH (+ -2 N)
                   (CONS 1 (PASCAL-ROW-H (+ -1 N) 2 1)))))

Subgoal 4.1''
(IMPLIES
    (AND (INTEGERP N)
         (<= 2 N)
         (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N)))))
    (EQUAL (NTH (+ -2 N)
                (CONS 1 (PASCAL-ROW-H (+ -1 N) 2 1)))
           (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -2 N))))))))

*** Key checkpoints under a top-level induction: ***

Subgoal *1/2.2.3.1''
(IMPLIES (AND (NOT (ZP N))
              (<= 4 N)
              (NOT (NTH (+ -3 N)
                        (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3))))
              (NOT (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))))
         (EQUAL (NTH (+ -3 N)
                     (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
                1))

Subgoal *1/2.2.2.3.1''
(IMPLIES
     (AND (NOT (ZP N))
          (<= 4 N)
          (EQUAL (NTH (+ -3 N)
                      (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3)))
                 1)
          (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))
          (NOT (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))
     (EQUAL (NTH (+ -3 N)
                 (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
            1))

Subgoal *1/2.2.2.2.1''
(IMPLIES
 (AND
     (NOT (ZP N))
     (<= 4 N)
     (EQUAL (NTH (+ -3 N)
                 (LIST* 1 3 (PASCAL-ROW-H (+ -2 N) 3 3)))
            (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))
     (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))
     (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N))))))
 (EQUAL
      (NTH (+ -3 N)
           (CONS 3 (PASCAL-ROW-H (+ -1 N) 3 3)))
      (+ 1
         (CAR (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))
         (CAR (ROW-HELPER (ROW-HELPER (CAR (PASCAL-TRIANGLE (+ -3 N)))))))))


ACL2 Error in ( MAKE-EVENT (ER-PROGN ...) ...):  Evaluation aborted.
To debug see :DOC print-gv, see :DOC trace, and see :DOC wet.
